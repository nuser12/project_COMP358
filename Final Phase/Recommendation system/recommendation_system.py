# -*- coding: utf-8 -*-
"""Recommendation system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j1veTE5CVGBw1zL5oorYv2cKaiiCu9Fp
"""

# Smart Course Recommendation Script
import pandas as pd
import joblib

from google.colab import files
uploaded = files.upload()

# Load trained model
model = joblib.load('final_rf_model.pkl')

# Load student dataset
students_df = pd.read_csv('student_profiles_full_required.csv')

# Enhanced Course Recommendation System with Broader Matching by Major


# Ask user for preferences and basic profile info
def get_user_input():
    print("\nWelcome to the Course Recommendation System!")
    major = input("Enter your major (e.g., AI & Robotics, Finance, UI/UX Design, Business, Healthcare): ").strip()
    if not major:
        print("No major provided. Defaulting to 'AI & Robotics'.")
        major = 'AI & Robotics'

    gpa = input("Enter your GPA (2.0 - 4.0): ").strip()
    try:
        gpa = float(gpa)
    except:
        print("Invalid GPA. Using default 3.0.")
        gpa = 3.0

    certs = input("How many professional certifications do you hold?: ").strip()
    try:
        certs = int(certs)
    except:
        print("Invalid input. Using default of 0 certifications.")
        certs = 0

    return major, gpa, certs

user_major, user_gpa, user_certs = get_user_input()

# Determine difficulty level based on GPA and certifications
if user_gpa >= 3.5 or user_certs >= 2:
    inferred_level = 'Advanced'
elif user_gpa >= 3.0:
    inferred_level = 'Intermediate'
else:
    inferred_level = 'Beginner'

print(f"\n Based on your GPA and certifications, you're recommended for: {inferred_level} level courses.")

# Sample course catalog with employment outlook
course_catalog = pd.DataFrame({
    'course_name': [
        'Intro to Machine Learning', 'Advanced Data Science', 'UI/UX Principles',
        'Cybersecurity Essentials', 'Finance Analytics', 'AI Ethics & Society',
        'Investment Strategies', 'Human-Computer Interaction', 'Blockchain Fundamentals',
        'Risk Management in Finance', 'Ethical Hacking', 'AI in Healthcare'
    ],
    'career_path': [
        'AI & Robotics', 'AI & Robotics', 'UI/UX Design',
        'Cybersecurity', 'Finance', 'AI & Robotics',
        'Finance', 'UI/UX Design', 'Finance',
        'Finance', 'Cybersecurity', 'Healthcare Informatics'
    ],
    'level': [
        'Beginner', 'Advanced', 'Beginner', 'Intermediate', 'Intermediate', 'Advanced',
        'Advanced', 'Advanced', 'Intermediate', 'Advanced', 'Advanced', 'Intermediate'
    ],
    'employment_growth': [
        'High', 'Very High', 'Moderate', 'Very High', 'High', 'Moderate',
        'Very High', 'Moderate', 'High', 'Very High', 'Very High', 'High'
    ]
})

# Add user profile to dataframe for output
user_profile = pd.DataFrame({
    'gpa': [user_gpa],
    'certifications': [user_certs],
    'career_goal': [user_major],
    'Recommended_Level': [inferred_level]
})

# Match user input to broader major-related recommended courses
recommended_courses = course_catalog[
    (course_catalog['career_path'].str.lower().str.contains(user_major.lower())) &
    (course_catalog['level'].str.lower() == inferred_level.lower())
]

if recommended_courses.empty:
    print("\nNo direct match found. Showing general success skill course.")
    print("\n Recommended Course: General Success Skills")
else:
    print("\n Top Recommended Courses Based on Your Profile:")
    for idx, row in recommended_courses.iterrows():
        print(f"- {row['course_name']}  | Employment Growth: {row['employment_growth']}")

# Save user result (optional)
user_profile['Recommended_Course'] = (
    recommended_courses.iloc[0]['course_name'] if not recommended_courses.empty else 'General Success Skills'
)
user_profile.to_csv('user_recommendation_summary.csv', index=False)
print("\nâœ… Personalized recommendation saved to 'user_recommendation_summary.csv'")